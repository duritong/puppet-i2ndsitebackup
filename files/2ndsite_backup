#!/bin/env ruby

require 'singleton'
require 'yaml'

class DuplicityRunner

  include Singleton

  def run
    nt = ft = nil
    while (ft.nil? || nt != ft ) do
      ft ||= nt
      nt = next_target
      puts nt['subtarget']
      exit unless system(command(target_id(nt['subtarget'])))
      store_target(nt)
    end
  end

  def target_id(target)
    target.sub("#{options['source_root']}/",'')
  end

  def command(target)
    "ssh -i /opt/2ndsite_backup/duplicity_key #{options['target_user']}@#{options['target_host']} mkdir -p #{File.join(options['target_root'],target)};"+
    "PASSPHRASE=\"#{options['passphrase']}\" duplicity --scp-command 'scp -o IdentityFile=/opt/2ndsite_backup/duplicity_key' --sftp-command 'sftp -o IdentityFile=/opt/2ndsite_backup/duplicity_key' --encrypt-key #{options['gpg_key']} --sign-key #{options['gpg_key']} #{File.join(options['source_root'],target)} ssh://#{options['target_user']}@#{options['target_host']}/#{File.join(options['target_root'],target)}"
  end


  def options
    @options ||= YAML.load(File.read('/opt/2ndsite_backup/options.yml'))
  end

  def subtargets(target)
    (Dir[File.join(options['source_root'],target)+(1..targets[target]).inject(""){|glob,l| "#{glob}/*" }]-[File.join(options['source_root'],target,'lost+found')]).sort
  end

  def next_target
    return first_target unless File.exist?('/opt/2ndsite_backup/state.yml')
    ls = last_state
    return first_target unless defined? ls['target']
    stargets = subtargets(ls['target'])
    index = stargets.index(ls['subtarget'])
    if index && n_subtarget=stargets[index+1]
      return {'target' => ls['target'], 'subtarget' => n_subtarget }
    else
      tindex = targets.keys.index(ls['target'])
      if tindex && n_target=targets.keys[tindex+1]
        return {'target' => n_target, 'subtarget' => subtargets(n_target).first }
      else
        return first_target
      end 
    end
  end

  def first_target
    { 'target' => targets.keys.first, 'subtarget' => subtargets(targets.keys.first).first }
  end

  def last_state
    YAML.load(File.read('/opt/2ndsite_backup/state.yml'))
  end

  def store_target(target)
    File.open('/opt/2ndsite_backup/state.yml','w'){|f| f << YAML.dump(target) }
  end

  def targets
    options['targets']
  end
end

DuplicityRunner.instance.run
